# -*- coding: utf-8 -*-
"""Protein Structure Prediction - MolGen Research Project - Kerry

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HDpTluAv_Q8VQb3HYRG7gfQ8wha96tr5
"""

import tensorflow as tf
import pandas as pd

fasta = "VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGYQG"

def preprocess_fasta(fasta):
  amino_acids = [fasta[i:i+1] for i in range(0, len(fasta))]

  STRINGS = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
  LABELS = [i for i in range(len(STRINGS))]

  def get_label_from_string(string, dataframe):
      result = dataframe.loc[dataframe['string'] == string, 'label']
      if not result.empty:
          return result.iloc[0]  # Extract the label value
      else:
          return None  # Return None if the string is not found

  # create a dataframe with two columns, string and labels
  df = pd.DataFrame({'string': STRINGS, 'label': LABELS})
  for i in range(len(amino_acids)):
    amino_acids[i] = get_label_from_string(amino_acids[i], df)

  return tf.one_hot(amino_acids, 20)

!pip install rcsbsearchapi

from os import write
from rcsbsearchapi import AttributeQuery
import requests

# Construct a query searching for structures from humans
query = AttributeQuery(
    attribute="rcsb_entity_source_organism.scientific_name",
    operator="exact_match",  # Other operators include "contains_phrase", "exists", and more
    value="Homo sapiens"
)

results = list(query())[0:1000]

f = open("ids.txt", "w")
f.write(", ".join(results))
f.close()

# NOT FINISHED
# converts any PDB file into a dataframe

# Imports
import requests
import pandas as pd

# Should grab the corresponding pdb file from the Protein Data Bank given its PDB ID.
# Returns entire pdb file as a string

def fetch_pdb_content(pdb_id):
    # PDB IDs are case-insensitive, convert to lowercase for consistency
    pdb_id = pdb_id.lower()
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"

    try:
        response = requests.get(url)
        # Return the content of the PDB file as a string
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"Failed to fetch PDB file {pdb_id}: {e}")
        return None


# Example: Cytochrome C
pdb = fetch_pdb_content('3ZOW')

#pdb file to dataframe
def pdb_to_arr(pdb):

  # Convert string to 2D array
  pdb_2D_array = [[]]
  pdb = pdb.strip().split('\n')
  pdb_2D_array = [line.split() for line in pdb]

  # Remove every line from the dataframe that doesn't create the position of a traditional atom.
  temp_arr = [[]]
  for line in pdb_2D_array:
    if 'ATOM' == line[0]:
      temp_arr.append(line)
  return temp_arr

pdb2Darr = pdb_to_arr(pdb)

for i in range(len(pdb2Darr)):
  print(pdb2Darr[i])

# I need a get_column function to grab columns from the 2D array I made easier
"""def get_column(matrix, col_index):
    column = []
    for i in range(len(matrix)):
      column.append(matrix[i])
    return column
"""
def get_column(matrix, col_index):
    return [row[col_index] for row in matrix if len(row) > col_index]

 # Convert 2D array into dataframe
def pdb2Darr_to_df(pdb_2D_array):


  # PDB data columns
  record_array = get_column(pdb_2D_array, 0)
  serial_number = get_column(pdb_2D_array, 1)
  atom_name = get_column(pdb_2D_array, 2)
  residue_type = get_column(pdb_2D_array, 3)
  chain_letter = get_column(pdb_2D_array, 4) # SOME PDB FILES DON'T HAVE SEPARATE CHAINS AND DON'T HAVE THIS LINE; THEY HAVE 10 COLUMNS NOT 11; # WILL WRITE CODE FOR THESE LATER
  residue_sequence_number = get_column(pdb_2D_array, 5)
  x_coordinate = get_column(pdb_2D_array, 6)
  y_coordinate = get_column(pdb_2D_array, 7)
  z_coordinate = get_column(pdb_2D_array, 8)
  occupancy = get_column(pdb_2D_array, 9)
  b_factor = get_column(pdb_2D_array, 10)
  atom = get_column(pdb_2D_array, 11)

  pdb_df = {
    "record_type": [record_array][0][1:],
    "serial_number": [serial_number][0][1:],
    "atom_name": [atom_name][0][1:],
    "residue_type": [residue_type][0][1:],
    "chain_letter": [chain_letter][0][1:],
    "residue_sequence_number": [residue_sequence_number][0][1:],
    "x_coordinate": [x_coordinate][0][1:],
    "y_coordinate": [y_coordinate][0][1:],
    "z_coordinate": [z_coordinate][0][1:],
    "occupancy": [occupancy][0][1:],
    "b_factor": [b_factor][0][1:]
    }

  return pdb_df

pdb_df = pdb2Darr_to_df(pdb2Darr)
print(pdb_df)

print(pdb_df["record_type"])